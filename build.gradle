plugins {
    id "io.github.goooler.shadow" version "8.1.7"
    id 'java'
}

group = 'com.orleansmc'
version = '0.0.1'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name "eldonexus"
        url "https://eldonexus.de/repository/maven-releases/"
        content {
            includeModule("com.github.yannicklamprecht", "worldborderapi")
        }
    }
    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }
    maven { url "https://repo.codemc.io/repository/maven-public/" }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    maven { url 'https://repo.william278.net/releases' }
    maven { url 'https://maven.enginehub.org/repo/' }
    maven { url 'https://mvn.lumine.io/repository/maven-public/' }
}

shadowJar {
    minimize()
}
jar.enabled = false
assemble.dependsOn(shadowJar)

dependencies {
    implementation 'com.github.stefvanschie.inventoryframework:IF:0.10.16'
    compileOnly(fileTree("${project.rootDir}/lib") { include("*.jar") })
    compileOnly 'net.skinsrestorer:skinsrestorer-api:15.4.0'
    compileOnly 'com.github.decentsoftware-eu:decentholograms:2.8.11'
    compileOnly 'com.mojang:authlib:1.5.21'
    compileOnly 'de.tr7zw:item-nbt-api-plugin:2.13.1'
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.1.0'
    compileOnly "io.papermc.paper:paper-api:1.20.6-R0.1-SNAPSHOT"
    compileOnly 'com.github.LoneDev6:itemsadder-api:3.6.3-beta-14'
    compileOnly 'me.lucko:helper:5.6.14'
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'net.luckperms:api:5.4'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}